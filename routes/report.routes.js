



















// const express = require('express');
// const router = express.Router();
// const controller = require('../controllers/report.controller');

// /**
//  * @swagger
//  * components:
//  *   securitySchemes:
//  *     bearerAuth:
//  *       type: http
//  *       scheme: bearer
//  *       bearerFormat: JWT
//  *       description: 'Enter JWT token generated by the main authentication service.'
//  *   schemas:
//  *     ReportInput:
//  *       type: object
//  *       required:
//  *         - report_name
//  *         - module_name
//  *         - sql_query
//  *         - graph_type
//  *       properties:
//  *         report_name:
//  *           type: string
//  *           description: The unique name of the report.
//  *         module_name:
//  *           type: string
//  *           description: The name of the module this report belongs to.
//  *         print:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access print feature.
//  *         export:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access export feature.
//  *         email:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access email feature.
//  *         sql_query:
//  *           type: string
//  *           format: text
//  *           description: The SQL query for the report. Use {{table_name}} as a placeholder for the table name if dynamic table substitution is needed.
//  *         graph:
//  *           type: string
//  *           enum: [yes, no]
//  *           default: 'no'
//  *           description: Whether the report includes a graph.
//  *         graph_type:
//  *           type: string
//  *           description: The type of graph for the report (e.g., bar, line, pie).
//  *         active:
//  *           type: string
//  *           enum: [yes, no]
//  *           default: 'yes'
//  *           description: Whether the report is active.
//  *         user_id:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs with access to this report.
//  *     Report:
//  *       type: object
//  *       properties:
//  *         id:
//  *           type: integer
//  *           description: The auto-generated id of the report.
//  *         report_name:
//  *           type: string
//  *           description: The user-defined name for the report.
//  *         module_name:
//  *           type: string
//  *           description: The name of the module this report belongs to.
//  *         print:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access print feature.
//  *         export:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access export feature.
//  *         email:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access email feature.
//  *         sql_query:
//  *           type: string
//  *           format: text
//  *           description: The SQL query for the report.
//  *         graph:
//  *           type: string
//  *           enum: [yes, no]
//  *           description: Whether the report includes a graph.
//  *         graph_type:
//  *           type: string
//  *           description: The type of graph for the report (e.g., bar, line, pie).
//  *         active:
//  *           type: string
//  *           enum: [yes, no]
//  *           description: Whether the report is active.
//  *         user_id:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs with access to this report.
//  *         created_by:
//  *           type: integer
//  *           description: ID of the user who created the report.
//  *         updated_by:
//  *           type: integer
//  *           description: ID of the user who last updated the report.
//  *         created_date_and_time:
//  *           type: string
//  *           format: date-time
//  *           description: The date and time the report was created.
//  *         updated_date_and_time:
//  *           type: string
//  *           format: date-time
//  *           description: The date and time the report was last updated.
//  *     RunQueryInput:
//  *       type: object
//  *       required:
//  *         - report_name
//  *         - table_name
//  *       properties:
//  *         report_name:
//  *           type: string
//  *           description: The name of the report to run.
//  *         table_name:
//  *           type: string
//  *           description: The name of the table to run the report query on. Must be a valid table name in the database.
//  */

// /**
//  * @swagger
//  * tags:
//  *   name: Reports
//  *   description: API for managing reports
//  */

// /**
//  * @swagger
//  * /api/reports:
//  *   post:
//  *     summary: Create a new report
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/ReportInput'
//  *     responses:
//  *       201:
//  *         description: The report was successfully created
//  *         content:
//  *           application/json:
//  *             schema:
//  *               $ref: '#/components/schemas/Report'
//  *       400:
//  *         description: Bad request (e.g., missing required fields)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       500:
//  *         description: Some server error
//  */
// router.post('/', controller.create);

// /**
//  * @swagger
//  * /api/reports:
//  *   get:
//  *     summary: Retrieve a list of all reports
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     responses:
//  *       200:
//  *         description: A list of reports.
//  *         content:
//  *           application/json:
//  *             schema:
//  *               type: array
//  *               items:
//  *                 $ref: '#/components/schemas/Report'
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  */
// router.get('/', controller.findAll);

// /**
//  * @swagger
//  * /api/reports/{id}:
//  *   get:
//  *     summary: Get a report by ID
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         schema:
//  *           type: integer
//  *         required: true
//  *         description: The report ID
//  *     responses:
//  *       200:
//  *         description: The report data
//  *         content:
//  *           application/json:
//  *             schema:
//  *               $ref: '#/components/schemas/Report'
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Report not found
//  */
// router.get('/:id', controller.findOne);

// /**
//  * @swagger
//  * /api/reports/{id}:
//  *   put:
//  *     summary: Update a report by ID
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         schema:
//  *           type: integer
//  *         required: true
//  *         description: The report ID
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/ReportInput'
//  *     responses:
//  *       200:
//  *         description: Report was updated successfully.
//  *       400:
//  *         description: Bad request (e.g., missing required fields)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Report not found
//  */
// router.put('/:id', controller.update);

// /**
//  * @swagger
//  * /api/reports/{id}:
//  *   delete:
//  *     summary: Delete a report by ID
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         schema:
//  *           type: integer
//  *         required: true
//  *         description: The report ID
//  *     responses:
//  *       200:
//  *         description: Report was deleted successfully.
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Report not found
//  */
// router.delete('/:id', controller.delete);

// /**
//  * @swagger
//  * /api/reports/run:
//  *   post:
//  *     summary: Run a report's SQL query on a specified table
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/RunQueryInput'
//  *     responses:
//  *       200:
//  *         description: Query executed successfully
//  *         content:
//  *           application/json:
//  *             schema:
//  *               type: object
//  *               properties:
//  *                 message:
//  *                   type: string
//  *                   description: Success message
//  *                 data:
//  *                   type: array
//  *                   items:
//  *                     type: object
//  *                   description: The query results
//  *       400:
//  *         description: Bad request (e.g., missing required fields or invalid SQL query)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided or user does not have access
//  *       404:
//  *         description: Report or table not found
//  *       500:
//  *         description: Some server error
//  */
// router.post('/run', controller.runQuery);

// module.exports = router;























// const express = require('express');
// const router = express.Router();
// const controller = require('../controllers/report.controller');

// /**
//  * @swagger
//  * components:
//  *   securitySchemes:
//  *     bearerAuth:
//  *       type: http
//  *       scheme: bearer
//  *       bearerFormat: JWT
//  *       description: 'Enter JWT token generated by the main authentication service.'
//  *   schemas:
//  *     ReportInput:
//  *       type: object
//  *       required:
//  *         - report_name
//  *         - module_name
//  *         - sql_query
//  *         - graph_type
//  *       properties:
//  *         report_name:
//  *           type: string
//  *           description: The unique name of the report.
//  *         module_name:
//  *           type: string
//  *           description: The name of the module this report belongs to.
//  *         print:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access print feature.
//  *         export:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access export feature.
//  *         email:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access email feature.
//  *         sql_query:
//  *           type: string
//  *           format: text
//  *           description: The SQL query for the report, including the specific table name to query.
//  *         graph:
//  *           type: string
//  *           enum: [yes, no]
//  *           default: 'no'
//  *           description: Whether the report includes a graph.
//  *         graph_type:
//  *           type: string
//  *           description: The type of graph for the report (e.g., bar, line, pie).
//  *         active:
//  *           type: string
//  *           enum: [yes, no]
//  *           default: 'yes'
//  *           description: Whether the report is active.
//  *         user_id:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs with access to this report.
//  *     Report:
//  *       type: object
//  *       properties:
//  *         id:
//  *           type: integer
//  *           description: The auto-generated id of the report.
//  *         report_name:
//  *           type: string
//  *           description: The user-defined name for the report.
//  *         module_name:
//  *           type: string
//  *           description: The name of the module this report belongs to.
//  *         print:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access print feature.
//  *         export:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access export feature.
//  *         email:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access email feature.
//  *         sql_query:
//  *           type: string
//  *           format: text
//  *           description: The SQL query for the report, including the specific table name.
//  *         graph:
//  *           type: string
//  *           enum: [yes, no]
//  *           description: Whether the report includes a graph.
//  *         graph_type:
//  *           type: string
//  *           description: The type of graph for the report (e.g., bar, line, pie).
//  *         active:
//  *           type: string
//  *           enum: [yes, no]
//  *           description: Whether the report is active.
//  *         user_id:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs with access to this report.
//  *         created_by:
//  *           type: integer
//  *           description: ID of the user who created the report.
//  *         updated_by:
//  *           type: integer
//  *           description: ID of the user who last updated the report.
//  *         created_date_and_time:
//  *           type: string
//  *           format: date-time
//  *           description: The date and time the report was created.
//  *         updated_date_and_time:
//  *           type: string
//  *           format: date-time
//  *           description: The date and time the report was last updated.
//  *     RunQueryInput:
//  *       type: object
//  *       required:
//  *         - report_name
//  *         - module_name
//  *       properties:
//  *         report_name:
//  *           type: string
//  *           description: The name of the report to run.
//  *         module_name:
//  *           type: string
//  *           description: The name of the module to run the report query against.
//  */

// /**
//  * @swagger
//  * tags:
//  *   name: Reports
//  *   description: API for managing reports
//  */

// /**
//  * @swagger
//  * /api/reports:
//  *   post:
//  *     summary: Create a new report
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/ReportInput'
//  *     responses:
//  *       201:
//  *         description: The report was successfully created
//  *         content:
//  *           application/json:
//  *             schema:
//  *               $ref: '#/components/schemas/Report'
//  *       400:
//  *         description: Bad request (e.g., missing required fields)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       500:
//  *         description: Some server error
//  */
// router.post('/', controller.create);

// /**
//  * @swagger
//  * /api/reports:
//  *   get:
//  *     summary: Retrieve a list of all reports
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     responses:
//  *       200:
//  *         description: A list of reports.
//  *         content:
//  *           application/json:
//  *             schema:
//  *               type: array
//  *               items:
//  *                 $ref: '#/components/schemas/Report'
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  */
// router.get('/', controller.findAll);

// /**
//  * @swagger
//  * /api/reports/{id}:
//  *   get:
//  *     summary: Get a report by ID
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         schema:
//  *           type: integer
//  *         required: true
//  *         description: The report ID
//  *     responses:
//  *       200:
//  *         description: The report data
//  *         content:
//  *           application/json:
//  *             schema:
//  *               $ref: '#/components/schemas/Report'
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Report not found
//  */
// router.get('/:id', controller.findOne);

// /**
//  * @swagger
//  * /api/reports/{id}:
//  *   put:
//  *     summary: Update a report by ID
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         schema:
//  *           type: integer
//  *         required: true
//  *         description: The report ID
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/ReportInput'
//  *     responses:
//  *       200:
//  *         description: Report was updated successfully.
//  *       400:
//  *         description: Bad request (e.g., missing required fields)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Report not found
//  */
// router.put('/:id', controller.update);

// /**
//  * @swagger
//  * /api/reports/{id}:
//  *   delete:
//  *     summary: Delete a report by ID
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         schema:
//  *           type: integer
//  *         required: true
//  *         description: The report ID
//  *     responses:
//  *       200:
//  *         description: Report was deleted successfully.
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Report not found
//  */
// router.delete('/:id', controller.delete);

// /**
//  * @swagger
//  * /api/reports/run:
//  *   post:
//  *     summary: Run a report's SQL query for a specified module
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/RunQueryInput'
//  *     responses:
//  *       200:
//  *         description: Query executed successfully
//  *         content:
//  *           application/json:
//  *             schema:
//  *               type: object
//  *               properties:
//  *                 message:
//  *                   type: string
//  *                   description: Success message
//  *                 data:
//  *                   type: array
//  *                   items:
//  *                     type: object
//  *                   description: The query results
//  *       400:
//  *         description: Bad request (e.g., missing required fields or invalid SQL query)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided or user does not have access
//  *       404:
//  *         description: Report not found
//  *       500:
//  *         description: Some server error
//  */
// router.post('/run', controller.runQuery);

// module.exports = router;













// const express = require('express');
// const router = express.Router();
// const controller = require('../controllers/report.controller');

// /**
//  * @swagger
//  * components:
//  *   securitySchemes:
//  *     bearerAuth:
//  *       type: http
//  *       scheme: bearer
//  *       bearerFormat: JWT
//  *       description: 'Enter JWT token generated by the main authentication service.'
//  *   schemas:
//  *     ReportInput:
//  *       type: object
//  *       required:
//  *         - report_name
//  *         - module_name
//  *         - sql_query
//  *         - graph_type
//  *       properties:
//  *         report_name:
//  *           type: string
//  *           description: The unique name of the report.
//  *         module_name:
//  *           type: string
//  *           description: The name of the module this report belongs to.
//  *         print:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access print feature.
//  *         export:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access export feature.
//  *         email:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access email feature.
//  *         sql_query:
//  *           type: string
//  *           format: text
//  *           description: The SQL query for the report, including the specific table name to query.
//  *         graph:
//  *           type: string
//  *           enum: [yes, no]
//  *           default: 'no'
//  *           description: Whether the report includes a graph.
//  *         graph_type:
//  *           type: string
//  *           description: The type of graph for the report (e.g., bar, line, pie).
//  *         active:
//  *           type: string
//  *           enum: [yes, no]
//  *           default: 'yes'
//  *           description: Whether the report is active.
//  *         user_id:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs with access to this report.
//  *     Report:
//  *       type: object
//  *       properties:
//  *         id:
//  *           type: integer
//  *           description: The auto-generated id of the report.
//  *         report_name:
//  *           type: string
//  *           description: The user-defined name for the report.
//  *         module_name:
//  *           type: string
//  *           description: The name of the module this report belongs to.
//  *         print:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access print feature.
//  *         export:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access export feature.
//  *         email:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access email feature.
//  *         sql_query:
//  *           type: string
//  *           format: text
//  *           description: The SQL query for the report, including the specific table name.
//  *         graph:
//  *           type: string
//  *           enum: [yes, no]
//  *           description: Whether the report includes a graph.
//  *         graph_type:
//  *           type: string
//  *           description: The type of graph for the report (e.g., bar, line, pie).
//  *         active:
//  *           type: string
//  *           enum: [yes, no]
//  *           description: Whether the report is active.
//  *         user_id:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs with access to this report.
//  *         created_by:
//  *           type: integer
//  *           description: ID of the user who created the report.
//  *         updated_by:
//  *           type: integer
//  *           description: ID of the user who last updated the report.
//  *         created_date_and_time:
//  *           type: string
//  *           format: date-time
//  *           description: The date and time the report was created.
//  *         updated_date_and_time:
//  *           type: string
//  *           format: date-time
//  *           description: The date and time the report was last updated.
//  *     RunQueryInput:
//  *       type: object
//  *       required:
//  *         - report_name
//  *         - module_name
//  *       properties:
//  *         report_name:
//  *           type: string
//  *           description: The name of the report to run.
//  *         module_name:
//  *           type: string
//  *           description: The name of the module to run the report query against.
//  *     GetColumnInput:
//  *       type: object
//  *       required:
//  *         - table_name
//  *         - column_names
//  *       properties:
//  *         table_name:
//  *           type: string
//  *           description: The name of the table to query.
//  *         column_names:
//  *           type: array
//  *           items:
//  *             type: string
//  *           description: Array of column names to retrieve from the table.
//  */

// /**
//  * @swagger
//  * tags:
//  *   name: Reports
//  *   description: API for managing reports
//  */

// /**
//  * @swagger
//  * /api/reports:
//  *   post:
//  *     summary: Create a new report
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/ReportInput'
//  *     responses:
//  *       201:
//  *         description: The report was successfully created
//  *         content:
//  *           application/json:
//  *             schema:
//  *               $ref: '#/components/schemas/Report'
//  *       400:
//  *         description: Bad request (e.g., missing required fields)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       500:
//  *         description: Some server error
//  */
// router.post('/', controller.create);

// /**
//  * @swagger
//  * /api/reports:
//  *   get:
//  *     summary: Retrieve a list of all reports
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     responses:
//  *       200:
//  *         description: A list of reports.
//  *         content:
//  *           application/json:
//  *             schema:
//  *               type: array
//  *               items:
//  *                 $ref: '#/components/schemas/Report'
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  */
// router.get('/', controller.findAll);

// /**
//  * @swagger
//  * /api/reports/{id}:
//  *   get:
//  *     summary: Get a report by ID
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         schema:
//  *           type: integer
//  *         required: true
//  *         description: The report ID
//  *     responses:
//  *       200:
//  *         description: The report data
//  *         content:
//  *           application/json:
//  *             schema:
//  *               $ref: '#/components/schemas/Report'
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Report not found
//  */
// router.get('/:id', controller.findOne);

// /**
//  * @swagger
//  * /api/reports/{id}:
//  *   put:
//  *     summary: Update a report by ID
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         schema:
//  *           type: integer
//  *         required: true
//  *         description: The report ID
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/ReportInput'
//  *     responses:
//  *       200:
//  *         description: Report was updated successfully.
//  *       400:
//  *         description: Bad request (e.g., missing required fields)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Report not found
//  */
// router.put('/:id', controller.update);

// /**
//  * @swagger
//  * /api/reports/{id}:
//  *   delete:
//  *     summary: Delete a report by ID
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         schema:
//  *           type: integer
//  *         required: true
//  *         description: The report ID
//  *     responses:
//  *       200:
//  *         description: Report was deleted successfully.
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Report not found
//  */
// router.delete('/:id', controller.delete);

// /**
//  * @swagger
//  * /api/reports/run:
//  *   post:
//  *     summary: Run a report's SQL query for a specified module
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/RunQueryInput'
//  *     responses:
//  *       200:
//  *         description: Query executed successfully
//  *         content:
//  *           application/json:
//  *             schema:
//  *               type: object
//  *               properties:
//  *                 message:
//  *                   type: string
//  *                   description: Success message
//  *                 data:
//  *                   type: array
//  *                   items:
//  *                     type: object
//  *                   description: The query results
//  *       400:
//  *         description: Bad request (e.g., missing required fields or invalid SQL query)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided or user does not have access
//  *       404:
//  *         description: Report not found
//  *       500:
//  *         description: Some server error
//  */
// router.post('/run', controller.runQuery);

// /**
//  * @swagger
//  * /api/reports/get-columns:
//  *   post:
//  *     summary: Retrieve specific columns from a table
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/GetColumnInput'
//  *     responses:
//  *       200:
//  *         description: Columns retrieved successfully
//  *         content:
//  *           application/json:
//  *             schema:
//  *               type: object
//  *               properties:
//  *                 message:
//  *                   type: string
//  *                   description: Success message
//  *                 data:
//  *                   type: array
//  *                   items:
//  *                     type: object
//  *                   description: The query results containing specified columns
//  *       400:
//  *         description: Bad request (e.g., missing required fields or invalid column names)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Table or columns not found
//  *       500:
//  *         description: Some server error
//  */
// router.post('/get-columns', controller.getColumns);

// module.exports = router;















// const express = require('express');
// const router = express.Router();
// const controller = require('../controllers/report.controller');

// /**
//  * @swagger
//  * components:
//  *   securitySchemes:
//  *     bearerAuth:
//  *       type: http
//  *       scheme: bearer
//  *       bearerFormat: JWT
//  *       description: 'Enter JWT token generated by the main authentication service.'
//  *   schemas:
//  *     ReportInput:
//  *       type: object
//  *       required:
//  *         - report_name
//  *         - module_name
//  *         - sql_query
//  *         - graph_type
//  *       properties:
//  *         report_name:
//  *           type: string
//  *           description: The unique name of the report.
//  *         module_name:
//  *           type: string
//  *           description: The name of the module this report belongs to.
//  *         print:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access print feature.
//  *         export:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access export feature.
//  *         email:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access email feature.
//  *         sql_query:
//  *           type: string
//  *           format: text
//  *           description: The SQL query for the report, including the specific table name to query.
//  *         graph:
//  *           type: string
//  *           enum: [yes, no]
//  *           default: 'no'
//  *           description: Whether the report includes a graph.
//  *         graph_type:
//  *           type: string
//  *           description: The type of graph for the report (e.g., bar, line, pie).
//  *         active:
//  *           type: string
//  *           enum: [yes, no]
//  *           default: 'yes'
//  *           description: Whether the report is active.
//  *         user_id:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs with access to this report.
//  *     Report:
//  *       type: object
//  *       properties:
//  *         id:
//  *           type: integer
//  *           description: The auto-generated id of the report.
//  *         report_name:
//  *           type: string
//  *           description: The user-defined name for the report.
//  *         module_name:
//  *           type: string
//  *           description: The name of the module this report belongs to.
//  *         print:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access print feature.
//  *         export:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access export feature.
//  *         email:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs who can access email feature.
//  *         sql_query:
//  *           type: string
//  *           format: text
//  *           description: The SQL query for the report, including the specific table name.
//  *         graph:
//  *           type: string
//  *           enum: [yes, no]
//  *           description: Whether the report includes a graph.
//  *         graph_type:
//  *           type: string
//  *           description: The type of graph for the report (e.g., bar, line, pie).
//  *         active:
//  *           type: string
//  *           enum: [yes, no]
//  *           description: Whether the report is active.
//  *         user_id:
//  *           type: array
//  *           items:
//  *             type: integer
//  *           description: Array of user IDs with access to this report.
//  *         created_by:
//  *           type: integer
//  *           description: ID of the user who created the report.
//  *         updated_by:
//  *           type: integer
//  *           description: ID of the user who last updated the report.
//  *         created_date_and_time:
//  *           type: string
//  *           format: date-time
//  *           description: The date and time the report was created.
//  *         updated_date_and_time:
//  *           type: string
//  *           format: date-time
//  *           description: The date and time the report was last updated.
//  *     RunQueryInput:
//  *       type: object
//  *       required:
//  *         - report_name
//  *         - module_name
//  *       properties:
//  *         report_name:
//  *           type: string
//  *           description: The name of the report to run.
//  *         module_name:
//  *           type: string
//  *           description: The name of the module to run the report query against.
//  *     GetColumnInput:
//  *       type: object
//  *       required:
//  *         - table_name
//  *         - column_names
//  *       properties:
//  *         table_name:
//  *           type: string
//  *           description: The name of the table to query.
//  *         column_names:
//  *           type: array
//  *           items:
//  *             type: string
//  *           description: Array of column names to retrieve from the table.
//  */

// /**
//  * @swagger
//  * tags:
//  *   name: Reports
//  *   description: API for managing reports
//  */

// /**
//  * @swagger
//  * /api/reports:
//  *   post:
//  *     summary: Create a new report
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/ReportInput'
//  *     responses:
//  *       201:
//  *         description: The report was successfully created
//  *         content:
//  *           application/json:
//  *             schema:
//  *               $ref: '#/components/schemas/Report'
//  *       400:
//  *         description: Bad request (e.g., missing required fields)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       500:
//  *         description: Some server error
//  */
// router.post('/', controller.create);

// /**
//  * @swagger
//  * /api/reports:
//  *   get:
//  *     summary: Retrieve a list of all reports
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     responses:
//  *       200:
//  *         description: A list of reports.
//  *         content:
//  *           application/json:
//  *             schema:
//  *               type: array
//  *               items:
//  *                 $ref: '#/components/schemas/Report'
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  */
// router.get('/', controller.findAll);

// /**
//  * @swagger
//  * /api/reports/{id}:
//  *   get:
//  *     summary: Get a report by ID
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         schema:
//  *           type: integer
//  *         required: true
//  *         description: The report ID
//  *     responses:
//  *       200:
//  *         description: The report data
//  *         content:
//  *           application/json:
//  *             schema:
//  *               $ref: '#/components/schemas/Report'
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Report not found
//  */
// router.get('/:id', controller.findOne);

// /**
//  * @swagger
//  * /api/reports/{id}:
//  *   put:
//  *     summary: Update a report by ID
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         schema:
//  *           type: integer
//  *         required: true
//  *         description: The report ID
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/ReportInput'
//  *     responses:
//  *       200:
//  *         description: Report was updated successfully.
//  *       400:
//  *         description: Bad request (e.g., missing required fields)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Report not found
//  */
// router.put('/:id', controller.update);

// /**
//  * @swagger
//  * /api/reports/{id}:
//  *   delete:
//  *     summary: Delete a report by ID
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     parameters:
//  *       - in: path
//  *         name: id
//  *         schema:
//  *           type: integer
//  *         required: true
//  *         description: The report ID
//  *     responses:
//  *       200:
//  *         description: Report was deleted successfully.
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Report not found
//  */
// router.delete('/:id', controller.delete);

// /**
//  * @swagger
//  * /api/reports/run:
//  *   post:
//  *     summary: Run a report's SQL query for a specified module
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/RunQueryInput'
//  *     responses:
//  *       200:
//  *         description: Query executed successfully
//  *         content:
//  *           application/json:
//  *             schema:
//  *               type: object
//  *               properties:
//  *                 message:
//  *                   type: string
//  *                   description: Success message
//  *                 columns:
//  *                   type: array
//  *                   items:
//  *                     type: string
//  *                   description: The column names (headings) of the query result
//  *                 data:
//  *                   type: array
//  *                   items:
//  *                     type: object
//  *                   description: The query results
//  *       400:
//  *         description: Bad request (e.g., missing required fields or invalid SQL query)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided or user does not have access
//  *       404:
//  *         description: Report not found
//  *       500:
//  *         description: Some server error
//  */
// router.post('/run', controller.runQuery);

// /**
//  * @swagger
//  * /api/reports/get-columns:
//  *   post:
//  *     summary: Retrieve specific columns from a table
//  *     tags: [Reports]
//  *     security:
//  *       - bearerAuth: []
//  *     requestBody:
//  *       required: true
//  *       content:
//  *         application/json:
//  *           schema:
//  *             $ref: '#/components/schemas/GetColumnInput'
//  *     responses:
//  *       200:
//  *         description: Columns retrieved successfully
//  *         content:
//  *           application/json:
//  *             schema:
//  *               type: object
//  *               properties:
//  *                 message:
//  *                   type: string
//  *                   description: Success message
//  *                 data:
//  *                   type: array
//  *                   items:
//  *                     type: object
//  *                   description: The query results containing specified columns
//  *       400:
//  *         description: Bad request (e.g., missing required fields or invalid column names)
//  *       401:
//  *         description: Unauthorized
//  *       403:
//  *         description: No token provided
//  *       404:
//  *         description: Table or columns not found
//  *       500:
//  *         description: Some server error
//  */
// router.post('/get-columns', controller.getColumns);

// module.exports = router;



















const express = require('express');
const router = express.Router();
const controller = require('../controllers/report.controller');

/**
 * @swagger
 * components:
 *   securitySchemes:
 *     bearerAuth:
 *       type: http
 *       scheme: bearer
 *       bearerFormat: JWT
 *       description: 'Enter JWT token generated by the main authentication service.'
 *   schemas:
 *     ReportInput:
 *       type: object
 *       required:
 *         - report_name
 *         - module_name
 *         - sql_query
 *         - graph_type
 *       properties:
 *         report_name:
 *           type: string
 *           description: The unique name of the report.
 *         module_name:
 *           type: string
 *           description: The name of the module this report belongs to.
 *         print:
 *           type: array
 *           items:
 *             type: integer
 *           description: Array of user IDs who can access print feature.
 *         export:
 *           type: array
 *           items:
 *             type: integer
 *           description: Array of user IDs who can access export feature.
 *         email:
 *           type: array
 *           items:
 *             type: integer
 *           description: Array of user IDs who can access email feature.
 *         sql_query:
 *           type: string
 *           format: text
 *           description: The SQL query for the report, including the specific table name to query.
 *         graph:
 *           type: string
 *           enum: [yes, no]
 *           default: 'no'
 *           description: Whether the report includes a graph.
 *         graph_type:
 *           type: string
 *           description: The type of graph for the report (e.g., bar, line, pie).
 *         active:
 *           type: string
 *           enum: [yes, no]
 *           default: 'yes'
 *           description: Whether the report is active.
 *         user_id:
 *           type: array
 *           items:
 *             type: integer
 *           description: Array of user IDs with access to this report.
 *     Report:
 *       type: object
 *       properties:
 *         id:
 *           type: integer
 *           description: The auto-generated id of the report.
 *         report_name:
 *           type: string
 *           description: The user-defined name for the report.
 *         module_name:
 *           type: string
 *           description: The name of the module this report belongs to.
 *         print:
 *           type: array
 *           items:
 *             type: integer
 *           description: Array of user IDs who can access print feature.
 *         export:
 *           type: array
 *           items:
 *             type: integer
 *           description: Array of user IDs who can access export feature.
 *         email:
 *           type: array
 *           items:
 *             type: integer
 *           description: Array of user IDs who can access email feature.
 *         sql_query:
 *           type: string
 *           format: text
 *           description: The SQL query for the report, including the specific table name.
 *         graph:
 *           type: string
 *           enum: [yes, no]
 *           description: Whether the report includes a graph.
 *         graph_type:
 *           type: string
 *           description: The type of graph for the report (e.g., bar, line, pie).
 *         active:
 *           type: string
 *           enum: [yes, no]
 *           description: Whether the report is active.
 *         user_id:
 *           type: array
 *           items:
 *             type: integer
 *           description: Array of user IDs with access to this report.
 *         created_by:
 *           type: integer
 *           description: ID of the user who created the report.
 *         updated_by:
 *           type: integer
 *           description: ID of the user who last updated the report.
 *         created_date_and_time:
 *           type: string
 *           format: date-time
 *           description: The date and time the report was created.
 *         updated_date_and_time:
 *           type: string
 *           format: date-time
 *           description: The date and time the report was last updated.
 *     RunQueryInput:
 *       type: object
 *       required:
 *         - report_name
 *         - module_name
 *       properties:
 *         report_name:
 *           type: string
 *           description: The name of the report to run.
 *         module_name:
 *           type: string
 *           description: The name of the module to run the report query against.
 *     GetColumnInput:
 *       type: object
 *       required:
 *         - table_name
 *         - column_names
 *       properties:
 *         table_name:
 *           type: string
 *           description: The name of the table to query.
 *         column_names:
 *           type: array
 *           items:
 *             type: string
 *           description: Array of column names to retrieve from the table.
 */

/**
 * @swagger
 * tags:
 *   name: Reports
 *   description: API for managing reports
 */

/**
 * @swagger
 * /api/reports:
 *   post:
 *     summary: Create a new report
 *     tags: [Reports]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ReportInput'
 *     responses:
 *       201:
 *         description: The report was successfully created
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Report'
 *       400:
 *         description: Bad request (e.g., missing required fields)
 *       401:
 *         description: Unauthorized
 *       403:
 *         description: No token provided
 *       500:
 *         description: Some server error
 */
router.post('/', controller.create);

/**
 * @swagger
 * /api/reports:
 *   get:
 *     summary: Retrieve a list of all reports
 *     tags: [Reports]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: A list of reports.
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Report'
 *       401:
 *         description: Unauthorized
 *       403:
 *         description: No token provided
 */
router.get('/', controller.findAll);

/**
 * @swagger
 * /api/reports/{id}:
 *   get:
 *     summary: Get a report by ID
 *     tags: [Reports]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: integer
 *         required: true
 *         description: The report ID
 *     responses:
 *       200:
 *         description: The report data
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Report'
 *       401:
 *         description: Unauthorized
 *       403:
 *         description: No token provided
 *       404:
 *         description: Report not found
 */
router.get('/:id', controller.findOne);

/**
 * @swagger
 * /api/reports/{id}:
 *   put:
 *     summary: Update a report by ID
 *     tags: [Reports]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: integer
 *         required: true
 *         description: The report ID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ReportInput'
 *     responses:
 *       200:
 *         description: Report was updated successfully.
 *       400:
 *         description: Bad request (e.g., missing required fields)
 *       401:
 *         description: Unauthorized
 *       403:
 *         description: No token provided
 *       404:
 *         description: Report not found
 */
router.put('/:id', controller.update);

/**
 * @swagger
 * /api/reports/{id}:
 *   delete:
 *     summary: Delete a report by ID
 *     tags: [Reports]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: integer
 *         required: true
 *         description: The report ID
 *     responses:
 *       200:
 *         description: Report was deleted successfully.
 *       401:
 *         description: Unauthorized
 *       403:
 *         description: No token provided
 *       404:
 *         description: Report not found
 */
router.delete('/:id', controller.delete);

/**
 * @swagger
 * /api/reports/run:
 *   post:
 *     summary: Run a report's SQL query for a specified module
 *     tags: [Reports]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/RunQueryInput'
 *     responses:
 *       200:
 *         description: Query executed successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Success message
 *                 columns:
 *                   type: array
 *                   items:
 *                     type: string
 *                   description: The column names (headings) of the query result
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                   description: The query results
 *       400:
 *         description: Bad request (e.g., missing required fields or invalid SQL query)
 *       401:
 *         description: Unauthorized
 *       403:
 *         description: No token provided or user does not have access
 *       404:
 *         description: Report not found
 *       500:
 *         description: Some server error
 */
router.post('/run', controller.runQuery);

/**
 * @swagger
 * /api/reports/get-columns:
 *   post:
 *     summary: Retrieve specific columns from a table
 *     tags: [Reports]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/GetColumnInput'
 *     responses:
 *       200:
 *         description: Columns retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   description: Success message
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                   description: The query results containing specified columns
 *       400:
 *         description: Bad request (e.g., missing required fields or invalid column names)
 *       401:
 *         description: Unauthorized
 *       403:
 *         description: No token provided
 *       404:
 *         description: Table or columns not found
 *       500:
 *         description: Some server error
 */
router.post('/get-columns', controller.getColumns);

/**
 * @swagger
 * /api/reports/pdf:
 *   post:
 *     summary: Generate a PDF from a report's SQL query results
 *     tags: [Reports]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/RunQueryInput'
 *     responses:
 *       200:
 *         description: PDF generated successfully
 *         content:
 *           application/pdf:
 *             schema:
 *               type: string
 *               format: binary
 *               description: The PDF file containing the report data
 *       400:
 *         description: Bad request (e.g., missing required fields or invalid SQL query)
 *       401:
 *         description: Unauthorized
 *       403:
 *         description: No token provided or user does not have access
 *       404:
 *         description: Report or table not found
 *       500:
 *         description: Some server error
 */
router.post('/pdf', controller.generatePDF);

module.exports = router;